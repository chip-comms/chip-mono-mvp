name: Python Backend CI/CD

on:
  push:
    branches: [ main, develop ]
    paths: 
      - 'python-backend/**'
      - '.github/workflows/python-backend-cicd.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'python-backend/**'
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg
        
    - name: Install Python dependencies
      run: |
        cd python-backend
        pip install -r requirements.txt
        
    - name: Run basic health check
      run: |
        cd python-backend
        python -c "
        import sys
        sys.path.append('.')
        try:
            from app.main import app
            print('✅ App imports successfully')
        except Exception as e:
            print(f'❌ App import failed: {e}')
            sys.exit(1)
        "
        
    - name: Check API endpoints
      run: |
        cd python-backend
        python -c "
        import sys
        sys.path.append('.')
        try:
            from app.routes import health, video, audio, analysis
            print('✅ All route modules import successfully')
        except Exception as e:
            print(f'❌ Route import failed: {e}')
            sys.exit(1)
        "

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Railway CLI
      run: |
        curl -fsSL https://railway.app/install.sh | sh
        echo "$HOME/.railway/bin" >> $GITHUB_PATH
        
    - name: Deploy to Railway
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
      run: |
        cd python-backend
        
        # Login to Railway
        railway login --token $RAILWAY_TOKEN
        
        # Link to project (create if doesn't exist)
        railway link || railway create chip-mono-mvp-backend
        
        # Set environment variables
        railway variables set SUPABASE_URL="${{ secrets.SUPABASE_URL }}"
        railway variables set SUPABASE_SERVICE_ROLE_KEY="${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}"
        railway variables set GEMINI_API_KEY="${{ secrets.GEMINI_API_KEY }}"
        railway variables set AI_PROVIDER="gemini"
        railway variables set CORS_ORIGINS="*"
        railway variables set UPLOAD_DIR="./storage/uploads"
        railway variables set TEMP_DIR="./storage/temp"
        railway variables set MAX_FILE_SIZE="500"
        
        # Deploy
        railway up --detach
        
    - name: Wait for deployment
      run: sleep 60
      
    - name: Get deployment URL and test
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
      run: |
        cd python-backend
        
        # Get the URL
        RAILWAY_URL=$(railway status --json | jq -r '.deployments[0].url // ""')
        
        if [ -z "$RAILWAY_URL" ]; then
          echo "❌ Could not get Railway URL"
          exit 1
        fi
        
        echo "🚀 Deployed to: $RAILWAY_URL"
        
        # Test the deployment
        echo "🔍 Testing deployment..."
        response=$(curl -s -o /dev/null -w "%{http_code}" "$RAILWAY_URL" || echo "000")
        
        if [ "$response" = "200" ]; then
          echo "✅ Health check passed!"
        else
          echo "⚠️ Health check returned: $response (may still be starting up)"
        fi
        
        # Test API endpoints
        echo "🔍 Testing API endpoints..."
        api_response=$(curl -s -o /dev/null -w "%{http_code}" "$RAILWAY_URL/api/health" || echo "000")
        
        if [ "$api_response" = "200" ]; then
          echo "✅ API health check passed!"
        else
          echo "⚠️ API health check returned: $api_response"
        fi
        
        # Save URL for potential Supabase update
        echo "RAILWAY_URL=$RAILWAY_URL" >> $GITHUB_ENV
        
    - name: Create deployment summary
      if: always()
      run: |
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Service**: Python Backend (FastAPI)" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: Production" >> $GITHUB_STEP_SUMMARY
        echo "- **URL**: ${{ env.RAILWAY_URL }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔗 Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "1. Update Supabase Edge Function with new URL:" >> $GITHUB_STEP_SUMMARY
        echo "   \`supabase secrets set PYTHON_BACKEND_URL=${{ env.RAILWAY_URL }}\`" >> $GITHUB_STEP_SUMMARY
        echo "2. Test the complete flow in your frontend" >> $GITHUB_STEP_SUMMARY