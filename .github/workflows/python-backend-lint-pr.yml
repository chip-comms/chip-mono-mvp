name: Python Backend - Lint and Format Check

permissions:
  contents: read
  issues: write
  pull-requests: write

on:
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'python-backend/**'
      - '.github/workflows/python-backend-lint-pr.yml'

jobs:
  python-backend-quality-check:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v44
        with:
          files: |
            python-backend/**/*.py
            python-backend/requirements.txt
            python-backend/**/*.txt
            python-backend/**/*.md
      
      - name: Skip if no changes
        if: steps.changed-files.outputs.any_changed != 'true'
        run: |
          echo "No python-backend files changed, skipping workflow"
          exit 0
      
      - name: Install Python dependencies
        if: steps.changed-files.outputs.any_changed == 'true'
        working-directory: ./python-backend
        run: |
          python -m pip install --upgrade pip
          pip install black flake8
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      
      - name: Validate requirements.txt
        if: steps.changed-files.outputs.any_changed == 'true'
        working-directory: ./python-backend
        run: |
          # Check if requirements.txt changed
          REQ_CHANGED=$(echo "${{ steps.changed-files.outputs.all_changed_files }}" | tr ' ' '\n' | grep -E 'python-backend/requirements\.txt$' | tr '\n' ' ')
          if [ -n "$REQ_CHANGED" ]; then
            echo "Validating requirements.txt..."
            if [ -f requirements.txt ]; then
              echo "✅ requirements.txt exists"
              pip install -r requirements.txt --dry-run
              echo "✅ requirements.txt is valid"
            else
              echo "❌ requirements.txt is missing"
              exit 1
            fi
          else
            echo "No requirements.txt changes to validate"
          fi
      
      - name: Check Python formatting with Black
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          # Get Python files that changed
          PYTHON_FILES=$(echo "${{ steps.changed-files.outputs.all_changed_files }}" | tr ' ' '\n' | grep -E '^python-backend/.*\.py$' | tr '\n' ' ')
          if [ -n "$PYTHON_FILES" ]; then
            echo "Checking Python formatting for: $PYTHON_FILES"
            black --check --diff $PYTHON_FILES
          else
            echo "No Python files to check formatting"
          fi
      
      - name: Lint Python files with flake8
        if: steps.changed-files.outputs.any_changed == 'true'
        working-directory: ./python-backend
        run: |
          # Get Python files that changed (relative to python-backend dir)
          PYTHON_FILES=$(echo "${{ steps.changed-files.outputs.all_changed_files }}" | tr ' ' '\n' | grep -E '^python-backend/.*\.py$' | sed 's|^python-backend/||' | tr '\n' ' ')
          if [ -n "$PYTHON_FILES" ]; then
            echo "Linting Python files: $PYTHON_FILES"
            flake8 $PYTHON_FILES
          else
            echo "No Python files to lint"
          fi
      
      - name: Import verification and health checks
        if: steps.changed-files.outputs.any_changed == 'true'
        working-directory: ./python-backend
        run: |
          # Check if Python files changed
          PYTHON_FILES=$(echo "${{ steps.changed-files.outputs.all_changed_files }}" | tr ' ' '\n' | grep -E '^python-backend/.*\.py$' | tr '\n' ' ')
          if [ -n "$PYTHON_FILES" ]; then
            echo "Running import verification..."
            python -c "import sys; sys.path.append('.'); from app.main import app; print('✅ Main app imports successfully')" || (echo "❌ Main app import failed" && exit 1)
            echo "Checking route imports..."
            python -c "import sys; sys.path.append('.'); from app.routes.health import router; print('✅ Health route imports successfully')" || (echo "❌ Health route import failed" && exit 1)
          else
            echo "No Python files to verify"
          fi
      
      - name: Comment on PR if checks fail
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '❌ **Python Backend code quality checks failed**\n\nPlease fix the following issues:\n- Run `black python-backend/` to fix formatting\n- Run `flake8 python-backend/` to check for linting errors\n- Ensure all imports resolve correctly\n- Validate requirements.txt is properly formatted\n\nThen push your changes to update this PR.'
            })